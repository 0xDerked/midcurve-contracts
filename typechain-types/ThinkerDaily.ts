/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ThinkerDailyInterface extends utils.Interface {
  functions: {
    "ENTRY_PRICE()": FunctionFragment;
    "HALF_DAY()": FunctionFragment;
    "MERKLE_ROOT()": FunctionFragment;
    "availableToClaim(bytes32[],uint256,address)": FunctionFragment;
    "beginGame()": FunctionFragment;
    "claimWinnings(bytes32[],uint256)": FunctionFragment;
    "claimedWinnings(address)": FunctionFragment;
    "expiryTimeAnswer()": FunctionFragment;
    "expiryTimeReveal()": FunctionFragment;
    "feeSet()": FunctionFragment;
    "gameStarted()": FunctionFragment;
    "gradeRound(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "rebsubmitIPFS(string)": FunctionFragment;
    "resubmitDirect(bytes32)": FunctionFragment;
    "revealAnswer(uint256,uint256)": FunctionFragment;
    "revealedAnswers(address)": FunctionFragment;
    "secretAnswers(address)": FunctionFragment;
    "setFee()": FunctionFragment;
    "submitDirect(bytes32)": FunctionFragment;
    "submitIPFS(string)": FunctionFragment;
    "submitted(address)": FunctionFragment;
    "uniqueSubmissions()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ENTRY_PRICE"
      | "HALF_DAY"
      | "MERKLE_ROOT"
      | "availableToClaim"
      | "beginGame"
      | "claimWinnings"
      | "claimedWinnings"
      | "expiryTimeAnswer"
      | "expiryTimeReveal"
      | "feeSet"
      | "gameStarted"
      | "gradeRound"
      | "owner"
      | "rebsubmitIPFS"
      | "resubmitDirect"
      | "revealAnswer"
      | "revealedAnswers"
      | "secretAnswers"
      | "setFee"
      | "submitDirect"
      | "submitIPFS"
      | "submitted"
      | "uniqueSubmissions"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ENTRY_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "HALF_DAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MERKLE_ROOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableToClaim",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "beginGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimWinnings",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedWinnings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "expiryTimeAnswer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expiryTimeReveal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeSet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gradeRound",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebsubmitIPFS",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resubmitDirect",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revealAnswer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revealedAnswers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "secretAnswers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "setFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitDirect",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitIPFS",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueSubmissions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ENTRY_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "HALF_DAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MERKLE_ROOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beginGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expiryTimeAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expiryTimeReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gradeRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebsubmitIPFS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resubmitDirect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealedAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secretAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitDirect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitIPFS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniqueSubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AnswerRevealed(address,uint256,uint256,uint256)": EventFragment;
    "AnswerSubmitted(address,bytes32,string,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnswerRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnswerSubmitted"): EventFragment;
}

export interface AnswerRevealedEventObject {
  playerAddress: string;
  answer: BigNumber;
  secret: BigNumber;
  submitted_at: BigNumber;
}
export type AnswerRevealedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  AnswerRevealedEventObject
>;

export type AnswerRevealedEventFilter = TypedEventFilter<AnswerRevealedEvent>;

export interface AnswerSubmittedEventObject {
  playerAddress: string;
  hashedAnswer: string;
  ipfsCid: string;
  needsRevealed: boolean;
}
export type AnswerSubmittedEvent = TypedEvent<
  [string, string, string, boolean],
  AnswerSubmittedEventObject
>;

export type AnswerSubmittedEventFilter = TypedEventFilter<AnswerSubmittedEvent>;

export interface ThinkerDaily extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThinkerDailyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ENTRY_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    HALF_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MERKLE_ROOT(overrides?: CallOverrides): Promise<[string]>;

    availableToClaim(
      _proof: PromiseOrValue<BytesLike>[],
      _amount: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    beginGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimWinnings(
      _proof: PromiseOrValue<BytesLike>[],
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimedWinnings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    expiryTimeAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;

    expiryTimeReveal(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeSet(overrides?: CallOverrides): Promise<[boolean]>;

    gameStarted(overrides?: CallOverrides): Promise<[boolean]>;

    gradeRound(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebsubmitIPFS(
      _ipfsCID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resubmitDirect(
      _hashedAnswer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealAnswer(
      _answer: PromiseOrValue<BigNumberish>,
      _secret: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealedAnswers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        guess: BigNumber;
        secret: BigNumber;
        timestamp: BigNumber;
      }
    >;

    secretAnswers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber] & {
        hashedAnswer: string;
        ipfsCid: string;
        needsRevealed: boolean;
        timestamp: BigNumber;
      }
    >;

    setFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitDirect(
      _hashedAnswer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitIPFS(
      _ipfsCID: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uniqueSubmissions(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ENTRY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  HALF_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  MERKLE_ROOT(overrides?: CallOverrides): Promise<string>;

  availableToClaim(
    _proof: PromiseOrValue<BytesLike>[],
    _amount: PromiseOrValue<BigNumberish>,
    _claimer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beginGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimWinnings(
    _proof: PromiseOrValue<BytesLike>[],
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimedWinnings(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  expiryTimeAnswer(overrides?: CallOverrides): Promise<BigNumber>;

  expiryTimeReveal(overrides?: CallOverrides): Promise<BigNumber>;

  feeSet(overrides?: CallOverrides): Promise<boolean>;

  gameStarted(overrides?: CallOverrides): Promise<boolean>;

  gradeRound(
    _merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  rebsubmitIPFS(
    _ipfsCID: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resubmitDirect(
    _hashedAnswer: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealAnswer(
    _answer: PromiseOrValue<BigNumberish>,
    _secret: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealedAnswers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      guess: BigNumber;
      secret: BigNumber;
      timestamp: BigNumber;
    }
  >;

  secretAnswers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean, BigNumber] & {
      hashedAnswer: string;
      ipfsCid: string;
      needsRevealed: boolean;
      timestamp: BigNumber;
    }
  >;

  setFee(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitDirect(
    _hashedAnswer: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitIPFS(
    _ipfsCID: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitted(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uniqueSubmissions(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ENTRY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    HALF_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    MERKLE_ROOT(overrides?: CallOverrides): Promise<string>;

    availableToClaim(
      _proof: PromiseOrValue<BytesLike>[],
      _amount: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beginGame(overrides?: CallOverrides): Promise<void>;

    claimWinnings(
      _proof: PromiseOrValue<BytesLike>[],
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimedWinnings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    expiryTimeAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    expiryTimeReveal(overrides?: CallOverrides): Promise<BigNumber>;

    feeSet(overrides?: CallOverrides): Promise<boolean>;

    gameStarted(overrides?: CallOverrides): Promise<boolean>;

    gradeRound(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    rebsubmitIPFS(
      _ipfsCID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resubmitDirect(
      _hashedAnswer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revealAnswer(
      _answer: PromiseOrValue<BigNumberish>,
      _secret: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revealedAnswers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        guess: BigNumber;
        secret: BigNumber;
        timestamp: BigNumber;
      }
    >;

    secretAnswers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber] & {
        hashedAnswer: string;
        ipfsCid: string;
        needsRevealed: boolean;
        timestamp: BigNumber;
      }
    >;

    setFee(overrides?: CallOverrides): Promise<void>;

    submitDirect(
      _hashedAnswer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitIPFS(
      _ipfsCID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uniqueSubmissions(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AnswerRevealed(address,uint256,uint256,uint256)"(
      playerAddress?: PromiseOrValue<string> | null,
      answer?: null,
      secret?: null,
      submitted_at?: null
    ): AnswerRevealedEventFilter;
    AnswerRevealed(
      playerAddress?: PromiseOrValue<string> | null,
      answer?: null,
      secret?: null,
      submitted_at?: null
    ): AnswerRevealedEventFilter;

    "AnswerSubmitted(address,bytes32,string,bool)"(
      playerAddress?: PromiseOrValue<string> | null,
      hashedAnswer?: null,
      ipfsCid?: null,
      needsRevealed?: null
    ): AnswerSubmittedEventFilter;
    AnswerSubmitted(
      playerAddress?: PromiseOrValue<string> | null,
      hashedAnswer?: null,
      ipfsCid?: null,
      needsRevealed?: null
    ): AnswerSubmittedEventFilter;
  };

  estimateGas: {
    ENTRY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    HALF_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    MERKLE_ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    availableToClaim(
      _proof: PromiseOrValue<BytesLike>[],
      _amount: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beginGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimWinnings(
      _proof: PromiseOrValue<BytesLike>[],
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimedWinnings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiryTimeAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    expiryTimeReveal(overrides?: CallOverrides): Promise<BigNumber>;

    feeSet(overrides?: CallOverrides): Promise<BigNumber>;

    gameStarted(overrides?: CallOverrides): Promise<BigNumber>;

    gradeRound(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebsubmitIPFS(
      _ipfsCID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resubmitDirect(
      _hashedAnswer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealAnswer(
      _answer: PromiseOrValue<BigNumberish>,
      _secret: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealedAnswers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    secretAnswers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitDirect(
      _hashedAnswer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitIPFS(
      _ipfsCID: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueSubmissions(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ENTRY_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HALF_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MERKLE_ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableToClaim(
      _proof: PromiseOrValue<BytesLike>[],
      _amount: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beginGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimWinnings(
      _proof: PromiseOrValue<BytesLike>[],
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimedWinnings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiryTimeAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expiryTimeReveal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gradeRound(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebsubmitIPFS(
      _ipfsCID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resubmitDirect(
      _hashedAnswer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealAnswer(
      _answer: PromiseOrValue<BigNumberish>,
      _secret: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealedAnswers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secretAnswers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitDirect(
      _hashedAnswer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitIPFS(
      _ipfsCID: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniqueSubmissions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
